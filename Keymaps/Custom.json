[
    //Override some default bindings.
    { "keys": ["ctrl+shift+w"], "command": "." },
    { "keys": ["alt+shift+up"], "command": "select_lines", "args": { "forward": false } },
    { "keys": ["alt+shift+down"], "command": "select_lines", "args": { "forward": true } },
    { "keys": ["ctrl+up"], "command": "scroll_lines", "args": { "amount": 1.0 } },
    { "keys": ["ctrl+down"], "command": "scroll_lines", "args": { "amount": -1.0 } },
    { "keys": ["ctrl+alt+p"], "command": "prompt_select_workspace" },
    { "keys": ["f9"], "command": "build" },
    { "keys": ["ctrl+f9"], "command": "build", "args": { "select": true } },
    { "keys": ["f7"], "command": "sort_lines", "args": { "case_sensitive": false } },
    { "keys": ["ctrl+f7"], "command": "sort_lines", "args": { "case_sensitive": true } },
    { "keys": ["ctrl+f4"], "command": "show_panel", "args": { "panel": "output.exec" } },
    { "keys": ["ctrl+q"], "command": "toggle_comment", "args": { "block": false } },
    { "keys": ["ctrl+shift+q"], "command": "toggle_comment", "args": { "block": true } },
    { "keys": ["ctrl+v"], "command": "paste_and_indent" },
    { "keys": ["ctrl+shift+v"], "command": "paste" },
    { "keys": ["ctrl+space"], "command": "insert", "args": { "characters": " " } },
    { "keys": ["ctrl+t"], "command": "transpose" },
    {
        "keys": ["ctrl+alt+1"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1]],
        },
    }, {
        "keys": ["ctrl+alt+2"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 0.5, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1]],
        },
    }, {
        "keys": ["ctrl+alt+3"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 0.33, 0.66, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1]],
        },
    }, {
        "keys": ["ctrl+alt+4"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 0.25, 0.5, 0.75, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1], [2, 0, 3, 1], [3, 0, 4, 1]],
        },
    }, {
        "keys": ["ctrl+alt+5"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 0.5, 1.0],
            "rows": [0.0, 0.5, 1.0],
            "cells": [
                [0, 0, 1, 1], [1, 0, 2, 1],
                [0, 1, 1, 2], [1, 1, 2, 2],
            ],
        },
    }, {
        "keys": ["ctrl+alt+6"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 0.5961, 1.0],
            "rows": [0.0, 1.0],
            "cells": [[0, 0, 1, 1], [1, 0, 2, 1]],
        },
    }, {
        "keys": ["ctrl+alt+8"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 1.0],
            "rows": [0.0, 0.5, 1.0],
            "cells": [[0, 0, 1, 1], [0, 1, 1, 2]],
        },
    }, {
        "keys": ["ctrl+alt+9"],
        "command": "set_layout",
        "args": {
            "cols": [0.0, 1.0],
            "rows": [0.0, 0.33, 0.66, 1.0],
            "cells": [[0, 0, 1, 1], [0, 1, 1, 2], [0, 2, 1, 3]],
        },
    },
    { "keys": ["ctrl+super+1"], "command": "focus_group", "args": { "group": 0 } },
    { "keys": ["ctrl+super+2"], "command": "focus_group", "args": { "group": 1 } },
    { "keys": ["ctrl+super+3"], "command": "focus_group", "args": { "group": 2 } },
    { "keys": ["ctrl+super+4"], "command": "focus_group", "args": { "group": 3 } },
    { "keys": ["ctrl+super+5"], "command": "focus_group", "args": { "group": 4 } },
    { "keys": ["ctrl+super+6"], "command": "focus_group", "args": { "group": 5 } },
    { "keys": ["ctrl+super+7"], "command": "focus_group", "args": { "group": 6 } },
    { "keys": ["ctrl+super+8"], "command": "focus_group", "args": { "group": 7 } },
    { "keys": ["ctrl+super+9"], "command": "focus_group", "args": { "group": 8 } },
    { "keys": ["ctrl+shift+super+1"], "command": "move_to_group", "args": { "group": 0 } },
    { "keys": ["ctrl+shift+super+2"], "command": "move_to_group", "args": { "group": 1 } },
    { "keys": ["ctrl+shift+super+3"], "command": "move_to_group", "args": { "group": 2 } },
    { "keys": ["ctrl+shift+super+4"], "command": "move_to_group", "args": { "group": 3 } },
    { "keys": ["ctrl+shift+super+5"], "command": "move_to_group", "args": { "group": 4 } },
    { "keys": ["ctrl+shift+super+6"], "command": "move_to_group", "args": { "group": 5 } },
    { "keys": ["ctrl+shift+super+7"], "command": "move_to_group", "args": { "group": 6 } },
    { "keys": ["ctrl+shift+super+8"], "command": "move_to_group", "args": { "group": 7 } },
    { "keys": ["ctrl+shift+super+9"], "command": "move_to_group", "args": { "group": 8 } },

    { "keys": ["alt+["], "command": "run_macro_file", "args": { "file": "res://Packages/SublimePreferences/Macros/Place Brace.sublime-macro" } },
    { "keys": ["alt+;"], "command": "run_macro_file", "args": { "file": "res://Packages/SublimePreferences/Macros/Place Semicolon.sublime-macro" } },
    { "keys": ["alt+shift+;"], "command": "run_macro_file", "args": { "file": "res://Packages/SublimePreferences/Macros/Place Colon.sublime-macro" } },
    { "keys": ["alt+,"], "command": "run_macro_file", "args": { "file": "res://Packages/SublimePreferences/Macros/Place Comma.sublime-macro" } },

    //Sometimes Windows 10 hooks ctrl+`, making it unusable.
    { "keys": ["alt+`"], "command": "show_panel", "args": { "panel": "console", "toggle": true } },

    //Enhanced auto-pairing rules.
    {
        "keys": ["\""],
        "command": "insert_snippet",
        "args": { "contents": "\"$0\"" },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^[])}>\\s;]|^$", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "\"$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.double - punctuation.definition.string.end", "match_all": true },
        ],
    }, {
        "keys": ["'"],
        "command": "insert_snippet",
        "args": { "contents": "'$0'" },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^[])}>\\s;]|^$", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "[\\w']$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted.single - punctuation.definition.string.end", "match_all": true },
        ],
    }, {
        "keys": ["`"],
        "command": "insert_snippet",
        "args": { "contents": "`$0`" },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^[])}>\\s;]|^$", "match_all": true },
            { "key": "preceding_text", "operator": "not_regex_contains", "operand": "`$", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted - punctuation.definition.string.end", "match_all": true },
        ],
    }, {
        "keys": ["`"],
        "command": "insert_snippet",
        "args": { "contents": "`${0:$SELECTION}`" },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "operand": false, "match_all": true },
        ],
    }, {
        "keys": ["`"],
        "command": "move",
        "args": { "by": "characters", "forward": true },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted - punctuation.definition.string.end", "match_all": true },
        ],
    }, {
        "keys": ["backspace"],
        "command": "run_macro_file",
        "args": { "file": "res://Packages/Default/Delete Left Right.sublime-macro" },
        "context": [
            { "key": "setting.auto_match_enabled" },
            { "key": "selection_empty", "match_all": true },
            { "key": "preceding_text", "operator": "regex_contains", "operand": "`$", "match_all": true },
            { "key": "following_text", "operator": "regex_contains", "operand": "^`", "match_all": true },
            { "key": "selector", "operator": "not_equal", "operand": "punctuation.definition.string.begin", "match_all": true },
            { "key": "eol_selector", "operator": "not_equal", "operand": "string.quoted - punctuation.definition.string.end", "match_all": true },
        ],
    },

    {
        "keys": ["ctrl+j"],
        "command": "move",
        "args": { "by": "lines", "forward": true },
        "context": [{ "key": "overlay_visible" }],
    }, {
        "keys": ["ctrl+k"],
        "command": "move",
        "args": { "by": "lines", "forward": false },
        "context": [{ "key": "overlay_visible" }],
    },

    //FuzzyFileNav.
    { "keys": ["ctrl+o"], "command": "fuzzy_start_from_file" },
    { "keys": ["ctrl+shift+o"], "command": "prompt_open_file" },
    {
        "keys": ["ctrl+w"],
        "command": "insert",
        "args": { "characters": "../" },
        "context": [{ "key": "overlay_visible" }],
    },

    //AceJump.
    { "keys": ["ctrl+shift+;"], "command": "ace_jump_word" },
    { "keys": ["ctrl+shift+'"], "command": "ace_jump_char" },
    { "keys": ["ctrl+shift+."], "command": "ace_jump_line" },
    { "keys": ["ctrl+shift+,"], "command": "ace_jump_within_line" },
    { "keys": ["alt+/"], "command": "ace_jump_select" },
    { "keys": ["alt+'"], "command": "ace_jump_add_cursor" },
    { "keys": ["alt+."], "command": "ace_jump_after" },

    //Expand Selection to Whitespace.
    { "keys": ["ctrl+shift+x"], "command": "expand_selection_to_whitespace" },

    //Expand Selection to Quotes.
    { "keys": ["ctrl+'"], "command": "expand_selection_to_quotes" },

    //ExpandRegion.
    { "keys": ["ctrl+shift+j"], "command": "expand_region" },

    //MultiEditUtils.
    { "keys": ["ctrl+alt+/"], "command": "normalize_region_ends" },
    { "keys": ["ctrl+alt+h"], "command": "preserve_case" },
    {
        "keys": ["alt+d"],
        "command": "selection_fields",
        "context": [{ "key": "is_selection_field", "operand": false }],
    }, {
        "keys": ["alt+d"],
        "command": "selection_fields",
        "args": { "mode": "smart", "only_other": true },
        "context": [{ "key": "is_selection_field" }],
    }, {
        "keys": ["alt+shift+d"],
        "command": "selection_fields",
        "args": { "mode": "add" },
    }, {
        "keys": ["ctrl+alt+d"],
        "command": "selection_fields",
        "args": { "mode": "subtract" },
    },

    //Bracket Highlighter.
    {
        //Convert single quoted string to double quoted string and vice versa.
        //Will handle escaping and unescaping quotes within the string.
        "keys": ["ctrl+alt+'"],
        "command": "bh_key",
        "args": {
            "lines" : true,
            "plugin": {
                "type": ["single_quote", "double_quote", "py_single_quote", "py_double_quote"],
                "command": "bh_modules.swapquotes",
            },
        },
    }, {
        //Go to left bracket.
        "keys": ["ctrl+["],
        "command": "bh_key",
        "args": {
            "no_outside_adj": null,
            "no_block_mode": null,
            "lines" : true,
            "plugin": {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect",
                "args": { "select": "left" },
            },
        },
    }, {
        //Go to right bracket.
        "keys": ["ctrl+]"],
        "command": "bh_key",
        "args": {
            "no_outside_adj": null,
            "no_block_mode": null,
            "lines" : true,
            "plugin": {
                "type": ["__all__"],
                "command": "bh_modules.bracketselect",
                "args": { "select": "right" },
            },
        },
    },
    { "keys": ["ctrl+alt+["], "command": "move", "args": { "by": "words", "forward": false } },
    { "keys": ["ctrl+alt+]"], "command": "move", "args": { "by": "word_ends", "forward": true } },

    //Abacus.
    { "keys": ["ctrl+alt+\\"], "command": "abacus" },

    //Compare Side-by-Side.
    { "keys": ["ctrl+alt+shift+d"], "command": "sbs_compare" },

    //Move Tab.
    {
        "keys": ["ctrl+alt+home"],
        "command": "move_tab",
        "args": { "position": "0" },
    }, {
        "keys": ["ctrl+alt+end"],
        "command": "move_tab",
        "args": { "position": "999" },
    },

    //Case Convertion.
    { "keys": ["ctrl+i", "ctrl+i"], "command": "convert_to_camel" },
    { "keys": ["ctrl+i", "ctrl+p"], "command": "convert_to_snake" },
    { "keys": ["ctrl+i", "ctrl+shift+p"], "command": "convert_to_pascal" },
    { "keys": ["ctrl+i", "ctrl+k"], "command": "convert_to_dash" },
    { "keys": ["ctrl+i", "ctrl+l"], "command": "convert_to_separate_words" },
    { "keys": ["ctrl+i", "ctrl+/"], "command": "convert_to_slash" },
    { "keys": ["ctrl+i", "ctrl+\\"], "command": "convert_to_back_slash" },
    { "keys": ["ctrl+i", "ctrl+."], "command": "convert_to_dot" },

    //Style Token.
    { "keys": ["ctrl+1"], "command": "token_style", "args": { "style_index": 3 } },
    { "keys": ["ctrl+2"], "command": "token_style", "args": { "style_index": 2 } },
    { "keys": ["ctrl+3"], "command": "token_style", "args": { "style_index": 0 } },
    { "keys": ["ctrl+4"], "command": "token_style", "args": { "style_index": 4 } },
    { "keys": ["ctrl+5"], "command": "token_style", "args": { "style_index": 1 } },
    { "keys": ["ctrl+shift+1"], "command": "token_style_clear", "args": { "style_index": 3 } },
    { "keys": ["ctrl+shift+2"], "command": "token_style_clear", "args": { "style_index": 2 } },
    { "keys": ["ctrl+shift+3"], "command": "token_style_clear", "args": { "style_index": 0 } },
    { "keys": ["ctrl+shift+4"], "command": "token_style_clear", "args": { "style_index": 4 } },
    { "keys": ["ctrl+shift+5"], "command": "token_style_clear", "args": { "style_index": 1 } },
    { "keys": ["alt+1"], "command": "token_style_go", "args": { "style_index": 3 } },
    { "keys": ["alt+2"], "command": "token_style_go", "args": { "style_index": 2 } },
    { "keys": ["alt+3"], "command": "token_style_go", "args": { "style_index": 0 } },
    { "keys": ["alt+4"], "command": "token_style_go", "args": { "style_index": 4 } },
    { "keys": ["alt+5"], "command": "token_style_go", "args": { "style_index": 1 } },
    { "keys": ["alt+shift+1"], "command": "token_style_go_back", "args": { "style_index": 3 } },
    { "keys": ["alt+shift+2"], "command": "token_style_go_back", "args": { "style_index": 2 } },
    { "keys": ["alt+shift+3"], "command": "token_style_go_back", "args": { "style_index": 0 } },
    { "keys": ["alt+shift+4"], "command": "token_style_go_back", "args": { "style_index": 4 } },
    { "keys": ["alt+shift+5"], "command": "token_style_go_back", "args": { "style_index": 1 } },
    { "keys": ["alt+\\"], "command": "token_style_go" },
    { "keys": ["alt+shift+\\"], "command": "token_style_go_back" },

    //D Completion Daemon.
    {
        "keys": ["ctrl+shift+g"],
        "command": "dcd_goto_definition",
        "context": [{ "key": "selector", "operand": "source.d" }],
    }, {
        "keys": ["ctrl+\\"],
        "command": "dcd_show_documentation",
        "context": [{ "key": "selector", "operand": "source.d" }],
    },
]
