<snippet>
	<description>C++ template</description>
	<content><![CDATA[#include <bits/stdc++.h>//

#pragma GCC optimize "fast-math"

#define fst first
#define snd second
#define let const auto

using namespace std;

using uchar   = unsigned char;
using ustring = basic_string<uchar>;
using llong   = long long;
using ullong  = unsigned long long;
using ldouble = long double;

struct debug_t {
	template <typename T>
	debug_t& operator<<(const T& value) {
#       ifdef LOCAL_DEBUG
			cout << value << flush;
#       endif
		return *this;
	}

	debug_t& write(const char data[ ], streamsize n) {
#       ifdef LOCAL_DEBUG
			cout.write(data, n);
			cout << flush;
#       endif
		return *this;
	}
} debug;



int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	$0

	cout << flush;
	_Exit(0);
}]]></content>
	<!--<content><![CDATA[#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cctype>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <vector>

#ifdef __GNUC__
#   pragma GCC optimize "fast-math"
#else
#   include <conio.h>
#endif

#define sqr(x)   ((x) * (x))
#define eq(x, y) (((x) > (y) ? (x) - (y) : (y) - (x)) <= eps)
#define sz(x)    int((x).size())
#define all(x)   (x).begin(), (x).end()
#define rall(x)  (x).rbegin(), (x).rend()
#define fst      first
#define snd      second
#define mp       make_pair
#define eb       emplace_back
#define ef       emplace_front
#define mt       make_tuple
#define eps      1e-8
#define inf      int(1e9)
#define linf     llong(4e18)
#define let      const auto

#ifdef LOCAL_PROJECT
#   define TIMESTAMP(msg) debug << "[" msg "] Time = " << clock() / (double)CLOCKS_PER_SEC << '\n'
#else
#   define TIMESTAMP(msg) (void)0
#endif
#define DBG(x) debug << "[" #x "] = " << x << '\n'
#define DOUT(x) debug << x << '\n'
#define _ << ' ' <<

using namespace std;

using uchar   = unsigned char;
using ustring = basic_string<uchar>;
using llong   = long long;
using ullong  = unsigned long long;
using ldouble = long double;
using vi      = vector<int>;
using vvi     = vector<vi>;
using vd      = vector<double>;
using vvd     = vector<vd>;
using pii     = pair<int, int>;

struct debug_t {
	template <typename T>
	debug_t& operator<<(const T& value) {
#       ifdef LOCAL_DEBUG
			cout << value << flush;
#       endif
		return *this;
	}

	debug_t& write(const char data[ ], streamsize n) {
#       ifdef LOCAL_DEBUG
			cout.write(data, n);
			cout << flush;
#       endif
		return *this;
	}
} debug;



int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
#   ifdef LOCAL_PROJECT
		freopen("input.txt", "r", stdin);
#   endif

	$0

	TIMESTAMP("end");
	cout << flush;
#   ifdef __GNUC__
		_Exit(0);
#   else
		_getch();
#   endif
}]]></content>-->
	<tabTrigger>cpt</tabTrigger>
	<scope>source.c++</scope>
</snippet>
